{
  "address": "0x5EA365e08876FBcD76C51D26F9cB4451571628a8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "bool1",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "bool2",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "WhitelistHandle",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "name": "createPoolHandle",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "name": "createPoolInternalHandle",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualAmountsOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endEtfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endFundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_beginEtfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_beginFundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEnd",
          "type": "uint256"
        }
      ],
      "name": "exitPoolHandle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endEtfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endFundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCompletedCollect",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "closureEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        }
      ],
      "name": "exitPoolHandleB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualPoolAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "managerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "issueFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perfermanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalancesLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenWeightsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "constituentTokensLength",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "initBool",
          "type": "bool"
        }
      ],
      "name": "initRequire",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "issueFee",
          "type": "uint256"
        }
      ],
      "name": "joinPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualAmountsIn",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "canWhitelistLPs",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isList",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collectEndTime",
          "type": "uint256"
        }
      ],
      "name": "joinPoolHandle",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb7f4dcc92e5bd4a8da703bec2a3d06d23a089776f3687f53a743cf975b77e2a",
  "receipt": {
    "to": null,
    "from": "0x18c14363F9FaFE04bac6b96B74CE8A8236288a24",
    "contractAddress": "0x5EA365e08876FBcD76C51D26F9cB4451571628a8",
    "transactionIndex": 103,
    "gasUsed": "2521494",
    "logsBloom": "0x
    "blockHash": "0xaaf9581fc02499833e69365d2bded3fcc64d04d666483e671ca97440835e8a1e",
    "transactionHash": "0xeb7f4dcc92e5bd4a8da703bec2a3d06d23a089776f3687f53a743cf975b77e2a",
    "logs": [],
    "blockNumber": 8617417,
    "cumulativeGasUsed": "17132297",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ea87177e94f7977eab75d04c80b07225",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bool2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"WhitelistHandle\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"createPoolHandle\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"createPoolInternalHandle\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualAmountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endEtfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endFundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_beginEtfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_beginFundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnd\",\"type\":\"uint256\"}],\"name\":\"exitPoolHandle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endEtfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endFundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitRate\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompletedCollect\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"closureEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"}],\"name\":\"exitPoolHandleB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualPoolAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalancesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constituentTokensLength\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initBool\",\"type\":\"bool\"}],\"name\":\"initRequire\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualAmountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collectEndTime\",\"type\":\"uint256\"}],\"name\":\"joinPoolHandle\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"minAmountsOut\":\"- minimum amount of asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\",\"self\":\"- ConfigurableRightsPool instance calling the library\"},\"returns\":{\"actualAmountsOut\":\"- calculated amounts of each token to pull\"}},\"joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"maxAmountsIn\":\"- Max amount of asset tokens to spend\",\"poolAmountOut\":\"- number of pool tokens to receive\",\"self\":\"- ConfigurableRightsPool instance calling the library\"},\"returns\":{\"actualAmountsIn\":\"- calculated values of the tokens to pull in\"}},\"verifyTokenCompliance(address)\":{\"details\":\"Will revert if invalid\",\"params\":{\"token\":\"- The prospective token to verify\"}},\"verifyTokenCompliance(address[])\":{\"details\":\"Will revert if invalid - overloaded to save space in the main contract\",\"params\":{\"tokens\":\"- The prospective tokens to verify\"}}},\"title\":\"Factor out the weight updates\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"notice\":\"Exit a pool - redeem pool tokens for underlying assets\"},\"joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256)\":{\"notice\":\"Join a pool\"},\"verifyTokenCompliance(address)\":{\"notice\":\"Non ERC20-conforming tokens are problematic; don't allow them in pools\"},\"verifyTokenCompliance(address[])\":{\"notice\":\"Non ERC20-conforming tokens are problematic; don't allow them in pools\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SmartPoolManager.sol\":\"SmartPoolManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0x246b0073b9bbf88c381744625481200608f2327214060a3084850db4c7b1aff5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = 0;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0x25a552ca1ae8ef2bd0de4fca892fc10173a22719eb4f60aa47ca9eba5096b513\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n// import \\\"./SafeApprove.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    // using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    \\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n        uint snapshotTime;\\n        address[] tokens;\\n        uint[] tokensAmount;\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    function initRequire(\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = 0;\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), 0);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        // uint _etfAmount,\\n        // uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        // fundAmount = _fundAmount;\\n        // etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        IERC20(token).safeTransfer(msg.sender, 0);\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            IERC20(poolToken).safeTransferFrom(msg.sender, address(this), issueFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), 0);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        \\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);    \\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n            IERC20(t).safeApprove(self.vaultAddress(), 0);\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n        \\n        return tokensAmount;\\n    }\\n\\n    function handleFeeClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint feeRatio,\\n        bool isPerfermance\\n    ) external {\\n        if (feeRatio != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, feeRatio);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), 0);\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            if(isPerfermance) {\\n                IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, new uint[](poolTokens.length), isPerfermance);\\n            } else {\\n                IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, isPerfermance);\\n            }\\n            \\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        IERC20(erc20).safeTransferFrom(from, address(this), amount);\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n        IERC20(erc20).safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7660bf4b1b47f2213cedf22de05332925f5e83cffc72d3af1deff043b5fee066\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x612ca6610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100cf5760003560e01c80631c1af136146100d45780632c948f6f146100f6578063357934d21461012e5780633e9fc0bd1461015b57806344e3696f1461016e5780635471c3e41461018157806377d44349146101945780637f717d85146101b4578063b78e0bc9146101d4578063d03f2a0f146101e7578063d378778c146101fa578063d3aa47101461021a578063dba4989a1461022d578063de5bb5fc14610240578063ea8e866214610253575b600080fd5b8180156100e057600080fd5b506100f46100ef366004611de7565b610273565b005b81801561010257600080fd5b50610116610111366004612040565b61027f565b60405161012593929190612be5565b60405180910390f35b81801561013a57600080fd5b5061014e61014936600461211c565b6103df565b60405161012591906124d1565b6100f4610169366004612299565b61064c565b6100f461017c366004612306565b61069d565b61014e61018f366004612199565b6107e5565b8180156101a057600080fd5b506100f46101af366004611e1f565b610aa9565b6101c76101c2366004611fdc565b610ae5565b6040516101259190612bdc565b61014e6101e2366004612209565b610bb2565b6100f46101f5366004611fb1565b610eb3565b81801561020657600080fd5b506101c7610215366004612040565b610f99565b6100f4610228366004611f17565b6110f1565b6100f461023b366004611f61565b611151565b61011661024e3660046122c4565b6111a3565b81801561025f57600080fd5b506100f461026e36600461209a565b611223565b61027c816115d7565b50565b600080600061028e85856115ec565b9050600061029c818361166b565b93506102a88685611697565b92506102b6888833866116d0565b84156103d3576102c8888830876116d0565b61034e896001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561030457600080fd5b505afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c9190611e03565b6001600160a01b038916906000611851565b6103d3896001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561038a57600080fd5b505afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c29190611e03565b6001600160a01b0389169086611851565b50955095509592505050565b606080856001600160401b03811180156103f857600080fd5b50604051908082528060200260200182016040528015610422578160200160208202803683370190505b50905060005b8681101561063f57600088888381811061043e57fe5b90506020020160208101906104539190611de7565b905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b815260040161048391906123c5565b60206040518083038186803b15801561049b57600080fd5b505afa1580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190612281565b90506000610503600c6104fd896104fd8c6104f78f896115ec90919063ffffffff16565b9061194b565b90611985565b90506105118c8430846116d0565b6105978d6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054d57600080fd5b505afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105859190611e03565b6001600160a01b038516906000611851565b61061c8d6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190611e03565b6001600160a01b0385169083611851565b8085858151811061062957fe5b6020908102919091010152505050600101610428565b5098975050505050505050565b624f1a008311156106785760405162461bcd60e51b815260040161066f9061297f565b60405180910390fd5b808210156106985760405162461bcd60e51b815260040161066f90612604565b505050565b80156106bb5760405162461bcd60e51b815260040161066f906126ff565b67016345785d8a00008811156106e35760405162461bcd60e51b815260040161066f90612548565b67016345785d8a000087111561070b5760405162461bcd60e51b815260040161066f90612860565b67016345785d8a00008611156107335760405162461bcd60e51b815260040161066f90612aa7565b6706f05b59d3b2000085111561075b5760405162461bcd60e51b815260040161066f906127d9565b81841461077a5760405162461bcd60e51b815260040161066f90612777565b8183146107995760405162461bcd60e51b815260040161066f90612579565b60018210156107ba5760405162461bcd60e51b815260040161066f906129b6565b60108211156107db5760405162461bcd60e51b815260040161066f90612a7a565b5050505050505050565b606080856001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085d9190810190611e5e565b805190915083146108805760405162461bcd60e51b815260040161066f90612722565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190612281565b9050600061090b8761090684600161166b565b6119c4565b90508061092a5760405162461bcd60e51b815260040161066f906125ad565b82516001600160401b038111801561094157600080fd5b5060405190808252806020026020018201604052801561096b578160200160208202803683370190505b50935060005b8351811015610a9c57600084828151811061098857fe5b6020026020010151905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b81526004016109c091906123c5565b60206040518083038186803b1580156109d857600080fd5b505afa1580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a109190612281565b90506000610a2885610a23846001611697565b6115ec565b905080610a475760405162461bcd60e51b815260040161066f906125ad565b898985818110610a5357fe5b90506020020135811015610a795760405162461bcd60e51b815260040161066f90612750565b80888581518110610a8657fe5b6020908102919091010152505050600101610971565b5050505095945050505050565b60005b8181101561069857610add838383818110610ac357fe5b9050602002016020810190610ad89190611de7565b6115d7565b600101610aac565b808515610ba857600085158015610afc5750834210155b9050428511158180610b0b5750805b610b275760405162461bcd60e51b815260040161066f90612a18565b6040516370a0823160e01b81526001600160a01b038a16906370a0823190610b539033906004016123c5565b60206040518083038186803b158015610b6b57600080fd5b505afa158015610b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba39190612281565b925050505b9695505050505050565b606080866001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c2a9190810190611e5e565b80519091508414610c4d5760405162461bcd60e51b815260040161066f90612722565b6000886001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc09190612281565b90506000610cd388610906846001611697565b905080610cf25760405162461bcd60e51b815260040161066f906125ad565b82516001600160401b0381118015610d0957600080fd5b50604051908082528060200260200182016040528015610d33578160200160208202803683370190505b5093506000610d44866103e86115ec565b905060005b8451811015610ea4576000858281518110610d6057fe5b6020026020010151905060008c6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401610d9891906123c5565b60206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190612281565b90506000610e056103e88e02610dff84600161166b565b906115ec565b90506000610e2b610e186103e888611697565b610e238a6001611697565b8491026119c4565b905080610e4a5760405162461bcd60e51b815260040161066f906125ad565b8c8c86818110610e5657fe5b90506020020135811115610e7c5760405162461bcd60e51b815260040161066f9061283a565b808a8681518110610e8957fe5b6020908102919091010152505060019092019150610d499050565b50505050509695505050505050565b68056bc75e2d63100000811015610edc5760405162461bcd60e51b815260040161066f906127ac565b676765c793fa10079d601b1b811115610f075760405162461bcd60e51b815260040161066f9061263b565b816001600160a01b031663c6580d126040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4057600080fd5b505afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190612281565b15610f955760405162461bcd60e51b815260040161066f90612951565b5050565b6000610fa583836115ec565b90506000610fb38483611697565b9050610fc186863384611a55565b82156110e757610fdc6001600160a01b038616333085611bde565b611062876001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190611e03565b6001600160a01b038716906000611851565b6110e7876001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561109e57600080fd5b505afa1580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190611e03565b6001600160a01b0387169084611851565b5095945050505050565b8261110e5760405162461bcd60e51b815260040161066f9061269d565b8161112b5760405162461bcd60e51b815260040161066f906126cf565b6001600160a01b0381166106985760405162461bcd60e51b815260040161066f906128d4565b83158061115b5750825b6111775760405162461bcd60e51b815260040161066f906125d6565b811561119d578042111561119d5760405162461bcd60e51b815260040161066f906129e2565b50505050565b60008060006111b2898661166b565b92506111be888561166b565b915060006111cc83856119c4565b905060006111da888a6119c4565b9050808211156112155761121261120c6112066111f787896119c4565b6112018c8e6119c4565b611697565b896115ec565b876119c4565b92505b505096509650969350505050565b81156115cf576060836001600160401b038111801561124157600080fd5b5060405190808252806020026020018201604052801561126b578160200160208202803683370190505b50905060005b848110156113d457600086868381811061128757fe5b905060200201602081019061129c9190611de7565b90506000886001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b81526004016112cc91906123c5565b60206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c9190612281565b9050600061132a82886115ec565b90506113388a8430846116d0565b8085858151811061134557fe5b60200260200101818152505061138d8b6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054d57600080fd5b6113c98b6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d357600080fd5b505050600101611271565b5081156114f657866001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141457600080fd5b505afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190611e03565b6001600160a01b0316631483d99d868684816001600160401b038111801561147357600080fd5b5060405190808252806020026020018201604052801561149d578160200160208202803683370190505b50876040518663ffffffff1660e01b81526004016114bf959493929190612451565b600060405180830381600087803b1580156114d957600080fd5b505af11580156114ed573d6000803e3d6000fd5b505050506115cd565b866001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561152f57600080fd5b505afa158015611543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115679190611e03565b6001600160a01b0316631483d99d86868485876040518663ffffffff1660e01b815260040161159a959493929190612451565b600060405180830381600087803b1580156115b457600080fd5b505af11580156115c8573d6000803e3d6000fd5b505050505b505b505050505050565b61027c6001600160a01b038216336000611bff565b6000826115fb57506000611665565b8282028284828161160857fe5b04146116265760405162461bcd60e51b815260040161066f90612901565b6706f05b59d3b200008101818110156116515760405162461bcd60e51b815260040161066f90612901565b6000670de0b6b3a7640000825b0493505050505b92915050565b6000828201838110156116905760405162461bcd60e51b815260040161066f90612adb565b9392505050565b60008060006116a68585611c1e565b9150915080156116c85760405162461bcd60e51b815260040161066f90612a4f565b509392505050565b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f906116ff9087906004016123c5565b60206040518083038186803b15801561171757600080fd5b505afa15801561172b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174f9190612281565b90506000856001600160a01b031663948d8ce6866040518263ffffffff1660e01b815260040161177f91906123c5565b60206040518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190612281565b9050856001600160a01b0316633fdddaa2866117eb8587611697565b846040518463ffffffff1660e01b815260040161180a93929190612430565b600060405180830381600087803b15801561182457600080fd5b505af1158015611838573d6000803e3d6000fd5b506115cf925050506001600160a01b0386168585611bff565b8015806118d95750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061188790309086906004016123d9565b60206040518083038186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190612281565b155b6118f55760405162461bcd60e51b815260040161066f90612b4f565b6106988363095ea7b360e01b8484604051602401611914929190612417565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c43565b60008261195a57506000611665565b8282028284828161196757fe5b04146116905760405162461bcd60e51b815260040161066f90612893565b600061169083836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250611d28565b6000816119e35760405162461bcd60e51b815260040161066f9061292b565b826119f057506000611665565b670de0b6b3a764000083810290848281611a0657fe5b0414611a245760405162461bcd60e51b815260040161066f90612810565b60028304810181811015611a4a5760405162461bcd60e51b815260040161066f90612810565b600084828161165e57fe5b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f90611a849087906004016123c5565b60206040518083038186803b158015611a9c57600080fd5b505afa158015611ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad49190612281565b90506000856001600160a01b031663948d8ce6866040518263ffffffff1660e01b8152600401611b0491906123c5565b60206040518083038186803b158015611b1c57600080fd5b505afa158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190612281565b9050611b6b6001600160a01b038616853086611bde565b856001600160a01b0316633fdddaa286611b85858761166b565b846040518463ffffffff1660e01b8152600401611ba493929190612430565b600060405180830381600087803b158015611bbe57600080fd5b505af1158015611bd2573d6000803e3d6000fd5b50505050505050505050565b61119d846323b872dd60e01b858585604051602401611914939291906123f3565b6106988363a9059cbb60e01b8484604051602401611914929190612417565b600080838311611c345750508082036000611c3c565b505081810360015b9250929050565b611c55826001600160a01b0316611d5f565b611c715760405162461bcd60e51b815260040161066f90612ba5565b60006060836001600160a01b031683604051611c8d91906123a9565b6000604051808303816000865af19150503d8060008114611cca576040519150601f19603f3d011682016040523d82523d6000602084013e611ccf565b606091505b509150915081611cf15760405162461bcd60e51b815260040161066f90612668565b80511561119d5780806020019051810190611d0c9190611efb565b61119d5760405162461bcd60e51b815260040161066f90612b05565b60008183611d495760405162461bcd60e51b815260040161066f9190612515565b506000838581611d5557fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611d9357508115155b949350505050565b805161166581612c4d565b60008083601f840112611db7578182fd5b5081356001600160401b03811115611dcd578182fd5b6020830191508360208083028501011115611c3c57600080fd5b600060208284031215611df8578081fd5b813561169081612c4d565b600060208284031215611e14578081fd5b815161169081612c4d565b60008060208385031215611e31578081fd5b82356001600160401b03811115611e46578182fd5b611e5285828601611da6565b90969095509350505050565b60006020808385031215611e70578182fd5b82516001600160401b0380821115611e86578384fd5b818501915085601f830112611e99578384fd5b815181811115611ea7578485fd5b8381029150611eb7848301612bfb565b8181528481019084860184860187018a1015611ed1578788fd5b8795505b8386101561063f57611ee78a82611d9b565b835260019590950194918601918601611ed5565b600060208284031215611f0c578081fd5b815161169081612c62565b600080600060608486031215611f2b578081fd5b8335611f3681612c62565b92506020840135611f4681612c62565b91506040840135611f5681612c4d565b809150509250925092565b60008060008060808587031215611f76578081fd5b8435611f8181612c62565b93506020850135611f9181612c62565b92506040850135611fa181612c62565b9396929550929360600135925050565b60008060408385031215611fc3578182fd5b8235611fce81612c4d565b946020939093013593505050565b60008060008060008060c08789031215611ff4578182fd5b8635611fff81612c4d565b9550602087013561200f81612c62565b9450604087013561201f81612c62565b959894975094956060810135955060808101359460a0909101359350915050565b600080600080600060a08688031215612057578081fd5b853561206281612c4d565b9450602086013561207281612c4d565b9350604086013561208281612c4d565b94979396509394606081013594506080013592915050565b60008060008060008060a087890312156120b2578182fd5b86356120bd81612c4d565b955060208701356120cd81612c4d565b945060408701356001600160401b038111156120e7578283fd5b6120f389828a01611da6565b90955093505060608701359150608087013561210e81612c62565b809150509295509295509295565b600080600080600080600060c0888a031215612136578485fd5b873561214181612c4d565b9650602088013561215181612c4d565b955060408801356001600160401b0381111561216b578586fd5b6121778a828b01611da6565b989b979a50986060810135976080820135975060a09091013595509350505050565b6000806000806000608086880312156121b0578283fd5b85356121bb81612c4d565b945060208601356121cb81612c4d565b93506040860135925060608601356001600160401b038111156121ec578182fd5b6121f888828901611da6565b969995985093965092949392505050565b60008060008060008060a08789031215612221578384fd5b863561222c81612c4d565b9550602087013561223c81612c4d565b94506040870135935060608701356001600160401b0381111561225d578283fd5b61226989828a01611da6565b979a9699509497949695608090950135949350505050565b600060208284031215612292578081fd5b5051919050565b6000806000606084860312156122ad578081fd5b505081359360208301359350604090920135919050565b60008060008060008060c087890312156122dc578384fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600080600080600080600080610100898b031215612322578182fd5b883597506020890135965060408901359550606089013594506080890135935060a0890135925060c0890135915060e089013561235e81612c62565b809150509295985092959890939650565b6000815180845260208085019450808401835b8381101561239e57815187529582019590820190600101612382565b509495945050505050565b600082516123bb818460208701612c21565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6080808252810185905260008660a08301825b88811015612494576020833561247981612c4d565b6001600160a01b031683529283019290910190600101612464565b5083810360208501526124a7818861236f565b91505082810360408401526124bc818661236f565b91505082151560608301529695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612509578351835292840192918401916001016124ed565b50909695505050505050565b6000602082528251806020840152612534816040850160208701612c21565b601f01601f19169190910160400192915050565b6020808252601790820152764552525f494e56414c49445f4d414e414745525f46454560481b604082015260600190565b6020808252601a908201527908aa4a4bea6a882a4a8beae8a928e90a8a6be9a92a69a82a886960331b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b60208082526014908201527311549497d393d517d3d397d5d2125511531254d560621b604082015260600190565b6020808252601e908201527f4552525f4341505f4249474745525f5448414e5f494e4954535550504c590000604082015260600190565b60208082526013908201527208aa4a4be929c92a8bea6aaa0a098b2be9a82b606b1b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601890820152774552525f43414e4e4f545f57484954454c4953545f4c505360401b604082015260600190565b60208082526016908201527511549497d31417d393d517d5d2125511531254d5115160521b604082015260600190565b602080825260099082015268125b9a5d0819985a5b60ba1b604082015260600190565b60208082526014908201527308aa4a4be829a9eaa9ca8a6be9a92a69a82a886960631b604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252601b908201527a08aa4a4bea6a882a4a8be848298829c868aa6be9a92a69a82a8869602b1b604082015260600190565b60208082526013908201527222a9292fa4a724aa2fa9aaa828262cafa6a4a760691b604082015260600190565b6020808252601f908201527f4552525f494e56414c49445f5045524645524d414e43455f4d41585f46454500604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b6020808252601990820152784552525f494e56414c49445f49535355455f4d41585f46454560381b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601390820152724552525f494e56414c49445f4144445245535360681b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601490820152734552525f4e4f4e5a45524f5f455849545f46454560601b604082015260600190565b6020808252601f908201527f4552525f455843454544535f46554e445f52414953494e475f504552494f4400604082015260600190565b6020808252601290820152714552525f544f4f5f4645575f544f4b454e5360701b604082015260600190565b6020808252601c908201527b4552525f434f4c4c4543545f504552494f445f46494e49534845442160201b604082015260600190565b6020808252601d908201527f4552525f434c4f535552455f54494d455f4e4f545f4152524956454421000000604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b6020808252601390820152724552525f544f4f5f4d414e595f544f4b454e5360681b604082015260600190565b6020808252601a90820152794552525f494e56414c49445f52454445454d5f4d41585f46454560301b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b6040518181016001600160401b0381118282101715612c1957600080fd5b604052919050565b60005b83811015612c3c578181015183820152602001612c24565b8381111561119d5750506000910152565b6001600160a01b038116811461027c57600080fd5b801515811461027c57600080fdfea2646970667358221220bde045be201d1a99caa6960b678d0b78dad3abe28bbf416c2041839849cf08f564736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100cf5760003560e01c80631c1af136146100d45780632c948f6f146100f6578063357934d21461012e5780633e9fc0bd1461015b57806344e3696f1461016e5780635471c3e41461018157806377d44349146101945780637f717d85146101b4578063b78e0bc9146101d4578063d03f2a0f146101e7578063d378778c146101fa578063d3aa47101461021a578063dba4989a1461022d578063de5bb5fc14610240578063ea8e866214610253575b600080fd5b8180156100e057600080fd5b506100f46100ef366004611de7565b610273565b005b81801561010257600080fd5b50610116610111366004612040565b61027f565b60405161012593929190612be5565b60405180910390f35b81801561013a57600080fd5b5061014e61014936600461211c565b6103df565b60405161012591906124d1565b6100f4610169366004612299565b61064c565b6100f461017c366004612306565b61069d565b61014e61018f366004612199565b6107e5565b8180156101a057600080fd5b506100f46101af366004611e1f565b610aa9565b6101c76101c2366004611fdc565b610ae5565b6040516101259190612bdc565b61014e6101e2366004612209565b610bb2565b6100f46101f5366004611fb1565b610eb3565b81801561020657600080fd5b506101c7610215366004612040565b610f99565b6100f4610228366004611f17565b6110f1565b6100f461023b366004611f61565b611151565b61011661024e3660046122c4565b6111a3565b81801561025f57600080fd5b506100f461026e36600461209a565b611223565b61027c816115d7565b50565b600080600061028e85856115ec565b9050600061029c818361166b565b93506102a88685611697565b92506102b6888833866116d0565b84156103d3576102c8888830876116d0565b61034e896001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561030457600080fd5b505afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c9190611e03565b6001600160a01b038916906000611851565b6103d3896001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561038a57600080fd5b505afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c29190611e03565b6001600160a01b0389169086611851565b50955095509592505050565b606080856001600160401b03811180156103f857600080fd5b50604051908082528060200260200182016040528015610422578160200160208202803683370190505b50905060005b8681101561063f57600088888381811061043e57fe5b90506020020160208101906104539190611de7565b905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b815260040161048391906123c5565b60206040518083038186803b15801561049b57600080fd5b505afa1580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190612281565b90506000610503600c6104fd896104fd8c6104f78f896115ec90919063ffffffff16565b9061194b565b90611985565b90506105118c8430846116d0565b6105978d6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054d57600080fd5b505afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105859190611e03565b6001600160a01b038516906000611851565b61061c8d6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190611e03565b6001600160a01b0385169083611851565b8085858151811061062957fe5b6020908102919091010152505050600101610428565b5098975050505050505050565b624f1a008311156106785760405162461bcd60e51b815260040161066f9061297f565b60405180910390fd5b808210156106985760405162461bcd60e51b815260040161066f90612604565b505050565b80156106bb5760405162461bcd60e51b815260040161066f906126ff565b67016345785d8a00008811156106e35760405162461bcd60e51b815260040161066f90612548565b67016345785d8a000087111561070b5760405162461bcd60e51b815260040161066f90612860565b67016345785d8a00008611156107335760405162461bcd60e51b815260040161066f90612aa7565b6706f05b59d3b2000085111561075b5760405162461bcd60e51b815260040161066f906127d9565b81841461077a5760405162461bcd60e51b815260040161066f90612777565b8183146107995760405162461bcd60e51b815260040161066f90612579565b60018210156107ba5760405162461bcd60e51b815260040161066f906129b6565b60108211156107db5760405162461bcd60e51b815260040161066f90612a7a565b5050505050505050565b606080856001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085d9190810190611e5e565b805190915083146108805760405162461bcd60e51b815260040161066f90612722565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190612281565b9050600061090b8761090684600161166b565b6119c4565b90508061092a5760405162461bcd60e51b815260040161066f906125ad565b82516001600160401b038111801561094157600080fd5b5060405190808252806020026020018201604052801561096b578160200160208202803683370190505b50935060005b8351811015610a9c57600084828151811061098857fe5b6020026020010151905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b81526004016109c091906123c5565b60206040518083038186803b1580156109d857600080fd5b505afa1580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a109190612281565b90506000610a2885610a23846001611697565b6115ec565b905080610a475760405162461bcd60e51b815260040161066f906125ad565b898985818110610a5357fe5b90506020020135811015610a795760405162461bcd60e51b815260040161066f90612750565b80888581518110610a8657fe5b6020908102919091010152505050600101610971565b5050505095945050505050565b60005b8181101561069857610add838383818110610ac357fe5b9050602002016020810190610ad89190611de7565b6115d7565b600101610aac565b808515610ba857600085158015610afc5750834210155b9050428511158180610b0b5750805b610b275760405162461bcd60e51b815260040161066f90612a18565b6040516370a0823160e01b81526001600160a01b038a16906370a0823190610b539033906004016123c5565b60206040518083038186803b158015610b6b57600080fd5b505afa158015610b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba39190612281565b925050505b9695505050505050565b606080866001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c2a9190810190611e5e565b80519091508414610c4d5760405162461bcd60e51b815260040161066f90612722565b6000886001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc09190612281565b90506000610cd388610906846001611697565b905080610cf25760405162461bcd60e51b815260040161066f906125ad565b82516001600160401b0381118015610d0957600080fd5b50604051908082528060200260200182016040528015610d33578160200160208202803683370190505b5093506000610d44866103e86115ec565b905060005b8451811015610ea4576000858281518110610d6057fe5b6020026020010151905060008c6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401610d9891906123c5565b60206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190612281565b90506000610e056103e88e02610dff84600161166b565b906115ec565b90506000610e2b610e186103e888611697565b610e238a6001611697565b8491026119c4565b905080610e4a5760405162461bcd60e51b815260040161066f906125ad565b8c8c86818110610e5657fe5b90506020020135811115610e7c5760405162461bcd60e51b815260040161066f9061283a565b808a8681518110610e8957fe5b6020908102919091010152505060019092019150610d499050565b50505050509695505050505050565b68056bc75e2d63100000811015610edc5760405162461bcd60e51b815260040161066f906127ac565b676765c793fa10079d601b1b811115610f075760405162461bcd60e51b815260040161066f9061263b565b816001600160a01b031663c6580d126040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4057600080fd5b505afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190612281565b15610f955760405162461bcd60e51b815260040161066f90612951565b5050565b6000610fa583836115ec565b90506000610fb38483611697565b9050610fc186863384611a55565b82156110e757610fdc6001600160a01b038616333085611bde565b611062876001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190611e03565b6001600160a01b038716906000611851565b6110e7876001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561109e57600080fd5b505afa1580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190611e03565b6001600160a01b0387169084611851565b5095945050505050565b8261110e5760405162461bcd60e51b815260040161066f9061269d565b8161112b5760405162461bcd60e51b815260040161066f906126cf565b6001600160a01b0381166106985760405162461bcd60e51b815260040161066f906128d4565b83158061115b5750825b6111775760405162461bcd60e51b815260040161066f906125d6565b811561119d578042111561119d5760405162461bcd60e51b815260040161066f906129e2565b50505050565b60008060006111b2898661166b565b92506111be888561166b565b915060006111cc83856119c4565b905060006111da888a6119c4565b9050808211156112155761121261120c6112066111f787896119c4565b6112018c8e6119c4565b611697565b896115ec565b876119c4565b92505b505096509650969350505050565b81156115cf576060836001600160401b038111801561124157600080fd5b5060405190808252806020026020018201604052801561126b578160200160208202803683370190505b50905060005b848110156113d457600086868381811061128757fe5b905060200201602081019061129c9190611de7565b90506000886001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b81526004016112cc91906123c5565b60206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c9190612281565b9050600061132a82886115ec565b90506113388a8430846116d0565b8085858151811061134557fe5b60200260200101818152505061138d8b6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054d57600080fd5b6113c98b6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d357600080fd5b505050600101611271565b5081156114f657866001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141457600080fd5b505afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190611e03565b6001600160a01b0316631483d99d868684816001600160401b038111801561147357600080fd5b5060405190808252806020026020018201604052801561149d578160200160208202803683370190505b50876040518663ffffffff1660e01b81526004016114bf959493929190612451565b600060405180830381600087803b1580156114d957600080fd5b505af11580156114ed573d6000803e3d6000fd5b505050506115cd565b866001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561152f57600080fd5b505afa158015611543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115679190611e03565b6001600160a01b0316631483d99d86868485876040518663ffffffff1660e01b815260040161159a959493929190612451565b600060405180830381600087803b1580156115b457600080fd5b505af11580156115c8573d6000803e3d6000fd5b505050505b505b505050505050565b61027c6001600160a01b038216336000611bff565b6000826115fb57506000611665565b8282028284828161160857fe5b04146116265760405162461bcd60e51b815260040161066f90612901565b6706f05b59d3b200008101818110156116515760405162461bcd60e51b815260040161066f90612901565b6000670de0b6b3a7640000825b0493505050505b92915050565b6000828201838110156116905760405162461bcd60e51b815260040161066f90612adb565b9392505050565b60008060006116a68585611c1e565b9150915080156116c85760405162461bcd60e51b815260040161066f90612a4f565b509392505050565b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f906116ff9087906004016123c5565b60206040518083038186803b15801561171757600080fd5b505afa15801561172b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174f9190612281565b90506000856001600160a01b031663948d8ce6866040518263ffffffff1660e01b815260040161177f91906123c5565b60206040518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190612281565b9050856001600160a01b0316633fdddaa2866117eb8587611697565b846040518463ffffffff1660e01b815260040161180a93929190612430565b600060405180830381600087803b15801561182457600080fd5b505af1158015611838573d6000803e3d6000fd5b506115cf925050506001600160a01b0386168585611bff565b8015806118d95750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061188790309086906004016123d9565b60206040518083038186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190612281565b155b6118f55760405162461bcd60e51b815260040161066f90612b4f565b6106988363095ea7b360e01b8484604051602401611914929190612417565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c43565b60008261195a57506000611665565b8282028284828161196757fe5b04146116905760405162461bcd60e51b815260040161066f90612893565b600061169083836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250611d28565b6000816119e35760405162461bcd60e51b815260040161066f9061292b565b826119f057506000611665565b670de0b6b3a764000083810290848281611a0657fe5b0414611a245760405162461bcd60e51b815260040161066f90612810565b60028304810181811015611a4a5760405162461bcd60e51b815260040161066f90612810565b600084828161165e57fe5b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f90611a849087906004016123c5565b60206040518083038186803b158015611a9c57600080fd5b505afa158015611ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad49190612281565b90506000856001600160a01b031663948d8ce6866040518263ffffffff1660e01b8152600401611b0491906123c5565b60206040518083038186803b158015611b1c57600080fd5b505afa158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190612281565b9050611b6b6001600160a01b038616853086611bde565b856001600160a01b0316633fdddaa286611b85858761166b565b846040518463ffffffff1660e01b8152600401611ba493929190612430565b600060405180830381600087803b158015611bbe57600080fd5b505af1158015611bd2573d6000803e3d6000fd5b50505050505050505050565b61119d846323b872dd60e01b858585604051602401611914939291906123f3565b6106988363a9059cbb60e01b8484604051602401611914929190612417565b600080838311611c345750508082036000611c3c565b505081810360015b9250929050565b611c55826001600160a01b0316611d5f565b611c715760405162461bcd60e51b815260040161066f90612ba5565b60006060836001600160a01b031683604051611c8d91906123a9565b6000604051808303816000865af19150503d8060008114611cca576040519150601f19603f3d011682016040523d82523d6000602084013e611ccf565b606091505b509150915081611cf15760405162461bcd60e51b815260040161066f90612668565b80511561119d5780806020019051810190611d0c9190611efb565b61119d5760405162461bcd60e51b815260040161066f90612b05565b60008183611d495760405162461bcd60e51b815260040161066f9190612515565b506000838581611d5557fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611d9357508115155b949350505050565b805161166581612c4d565b60008083601f840112611db7578182fd5b5081356001600160401b03811115611dcd578182fd5b6020830191508360208083028501011115611c3c57600080fd5b600060208284031215611df8578081fd5b813561169081612c4d565b600060208284031215611e14578081fd5b815161169081612c4d565b60008060208385031215611e31578081fd5b82356001600160401b03811115611e46578182fd5b611e5285828601611da6565b90969095509350505050565b60006020808385031215611e70578182fd5b82516001600160401b0380821115611e86578384fd5b818501915085601f830112611e99578384fd5b815181811115611ea7578485fd5b8381029150611eb7848301612bfb565b8181528481019084860184860187018a1015611ed1578788fd5b8795505b8386101561063f57611ee78a82611d9b565b835260019590950194918601918601611ed5565b600060208284031215611f0c578081fd5b815161169081612c62565b600080600060608486031215611f2b578081fd5b8335611f3681612c62565b92506020840135611f4681612c62565b91506040840135611f5681612c4d565b809150509250925092565b60008060008060808587031215611f76578081fd5b8435611f8181612c62565b93506020850135611f9181612c62565b92506040850135611fa181612c62565b9396929550929360600135925050565b60008060408385031215611fc3578182fd5b8235611fce81612c4d565b946020939093013593505050565b60008060008060008060c08789031215611ff4578182fd5b8635611fff81612c4d565b9550602087013561200f81612c62565b9450604087013561201f81612c62565b959894975094956060810135955060808101359460a0909101359350915050565b600080600080600060a08688031215612057578081fd5b853561206281612c4d565b9450602086013561207281612c4d565b9350604086013561208281612c4d565b94979396509394606081013594506080013592915050565b60008060008060008060a087890312156120b2578182fd5b86356120bd81612c4d565b955060208701356120cd81612c4d565b945060408701356001600160401b038111156120e7578283fd5b6120f389828a01611da6565b90955093505060608701359150608087013561210e81612c62565b809150509295509295509295565b600080600080600080600060c0888a031215612136578485fd5b873561214181612c4d565b9650602088013561215181612c4d565b955060408801356001600160401b0381111561216b578586fd5b6121778a828b01611da6565b989b979a50986060810135976080820135975060a09091013595509350505050565b6000806000806000608086880312156121b0578283fd5b85356121bb81612c4d565b945060208601356121cb81612c4d565b93506040860135925060608601356001600160401b038111156121ec578182fd5b6121f888828901611da6565b969995985093965092949392505050565b60008060008060008060a08789031215612221578384fd5b863561222c81612c4d565b9550602087013561223c81612c4d565b94506040870135935060608701356001600160401b0381111561225d578283fd5b61226989828a01611da6565b979a9699509497949695608090950135949350505050565b600060208284031215612292578081fd5b5051919050565b6000806000606084860312156122ad578081fd5b505081359360208301359350604090920135919050565b60008060008060008060c087890312156122dc578384fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600080600080600080600080610100898b031215612322578182fd5b883597506020890135965060408901359550606089013594506080890135935060a0890135925060c0890135915060e089013561235e81612c62565b809150509295985092959890939650565b6000815180845260208085019450808401835b8381101561239e57815187529582019590820190600101612382565b509495945050505050565b600082516123bb818460208701612c21565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6080808252810185905260008660a08301825b88811015612494576020833561247981612c4d565b6001600160a01b031683529283019290910190600101612464565b5083810360208501526124a7818861236f565b91505082810360408401526124bc818661236f565b91505082151560608301529695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612509578351835292840192918401916001016124ed565b50909695505050505050565b6000602082528251806020840152612534816040850160208701612c21565b601f01601f19169190910160400192915050565b6020808252601790820152764552525f494e56414c49445f4d414e414745525f46454560481b604082015260600190565b6020808252601a908201527908aa4a4bea6a882a4a8beae8a928e90a8a6be9a92a69a82a886960331b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b60208082526014908201527311549497d393d517d3d397d5d2125511531254d560621b604082015260600190565b6020808252601e908201527f4552525f4341505f4249474745525f5448414e5f494e4954535550504c590000604082015260600190565b60208082526013908201527208aa4a4be929c92a8bea6aaa0a098b2be9a82b606b1b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601890820152774552525f43414e4e4f545f57484954454c4953545f4c505360401b604082015260600190565b60208082526016908201527511549497d31417d393d517d5d2125511531254d5115160521b604082015260600190565b602080825260099082015268125b9a5d0819985a5b60ba1b604082015260600190565b60208082526014908201527308aa4a4be829a9eaa9ca8a6be9a92a69a82a886960631b604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252601b908201527a08aa4a4bea6a882a4a8be848298829c868aa6be9a92a69a82a8869602b1b604082015260600190565b60208082526013908201527222a9292fa4a724aa2fa9aaa828262cafa6a4a760691b604082015260600190565b6020808252601f908201527f4552525f494e56414c49445f5045524645524d414e43455f4d41585f46454500604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b6020808252601990820152784552525f494e56414c49445f49535355455f4d41585f46454560381b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601390820152724552525f494e56414c49445f4144445245535360681b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601490820152734552525f4e4f4e5a45524f5f455849545f46454560601b604082015260600190565b6020808252601f908201527f4552525f455843454544535f46554e445f52414953494e475f504552494f4400604082015260600190565b6020808252601290820152714552525f544f4f5f4645575f544f4b454e5360701b604082015260600190565b6020808252601c908201527b4552525f434f4c4c4543545f504552494f445f46494e49534845442160201b604082015260600190565b6020808252601d908201527f4552525f434c4f535552455f54494d455f4e4f545f4152524956454421000000604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b6020808252601390820152724552525f544f4f5f4d414e595f544f4b454e5360681b604082015260600190565b6020808252601a90820152794552525f494e56414c49445f52454445454d5f4d41585f46454560301b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b6040518181016001600160401b0381118282101715612c1957600080fd5b604052919050565b60005b83811015612c3c578181015183820152602001612c24565b8381111561119d5750506000910152565b6001600160a01b038116811461027c57600080fd5b801515811461027c57600080fdfea2646970667358221220bde045be201d1a99caa6960b678d0b78dad3abe28bbf416c2041839849cf08f564736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "minAmountsOut": "- minimum amount of asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem",
          "self": "- ConfigurableRightsPool instance calling the library"
        },
        "returns": {
          "actualAmountsOut": "- calculated amounts of each token to pull"
        }
      },
      "joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "maxAmountsIn": "- Max amount of asset tokens to spend",
          "poolAmountOut": "- number of pool tokens to receive",
          "self": "- ConfigurableRightsPool instance calling the library"
        },
        "returns": {
          "actualAmountsIn": "- calculated values of the tokens to pull in"
        }
      },
      "verifyTokenCompliance(address)": {
        "details": "Will revert if invalid",
        "params": {
          "token": "- The prospective token to verify"
        }
      },
      "verifyTokenCompliance(address[])": {
        "details": "Will revert if invalid - overloaded to save space in the main contract",
        "params": {
          "tokens": "- The prospective tokens to verify"
        }
      }
    },
    "title": "Factor out the weight updates",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "notice": "Exit a pool - redeem pool tokens for underlying assets"
      },
      "joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256)": {
        "notice": "Join a pool"
      },
      "verifyTokenCompliance(address)": {
        "notice": "Non ERC20-conforming tokens are problematic; don't allow them in pools"
      },
      "verifyTokenCompliance(address[])": {
        "notice": "Non ERC20-conforming tokens are problematic; don't allow them in pools"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}