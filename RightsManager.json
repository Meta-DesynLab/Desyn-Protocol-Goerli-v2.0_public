{
  "address": "0xfE45a15652aC413275166b5C9035C0CB454a2cBD",
  "abi": [
    {
      "inputs": [],
      "name": "DEFAULT_CAN_TOKEN_WHITELISTS",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_CAN_WHITELIST_LPS",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool[]",
          "name": "a",
          "type": "bool[]"
        }
      ],
      "name": "constructRights",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        }
      ],
      "name": "convertRights",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "self",
          "type": "tuple"
        },
        {
          "internalType": "enum RightsManager.Permissions",
          "name": "permission",
          "type": "RightsManager.Permissions"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x27c8590ec57872bf838476f62d25b44360acfaa36923372c1ad2abb150f51cd1",
  "receipt": {
    "to": null,
    "from": "0x18c14363F9FaFE04bac6b96B74CE8A8236288a24",
    "contractAddress": "0xfE45a15652aC413275166b5C9035C0CB454a2cBD",
    "transactionIndex": 30,
    "gasUsed": "271522",
    "logsBloom": "0x
    "blockHash": "0xc792e83caa1d216a4267464403894c3d34c8bb43ffbe04943454b0949e23cfb4",
    "transactionHash": "0x27c8590ec57872bf838476f62d25b44360acfaa36923372c1ad2abb150f51cd1",
    "logs": [],
    "blockNumber": 8617413,
    "cumulativeGasUsed": "3394492",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ea87177e94f7977eab75d04c80b07225",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DEFAULT_CAN_TOKEN_WHITELISTS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_WHITELIST_LPS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"a\",\"type\":\"bool[]\"}],\"name\":\"constructRights\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"}],\"name\":\"convertRights\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"self\",\"type\":\"tuple\"},{\"internalType\":\"enum RightsManager.Permissions\",\"name\":\"permission\",\"type\":\"RightsManager.Permissions\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"constructRights(bool[])\":{\"details\":\"If you pass an empty array, it will construct it using the defaults\",\"params\":{\"a\":\"- array input\"},\"returns\":{\"_0\":\"Rights struct\"}},\"convertRights(RightsManager.Rights)\":{\"details\":\"avoids multiple calls to hasPermission\",\"params\":{\"rights\":\"- the rights struct to convert\"},\"returns\":{\"_0\":\"boolean array containing the rights settings\"}},\"hasPermission(RightsManager.Rights,RightsManager.Permissions)\":{\"params\":{\"permission\":\"- The permission to check\",\"self\":\"- Rights struct containing the permissions\"},\"returns\":{\"_0\":\"Boolean true if it has the permission\"}}},\"title\":\"Manage Configurable Rights for the smart pool                         by default, it is off on initialization and can only be turned on      canWhitelistLPs - can limit liquidity providers to a given set of addresses      canChangeCap - can change the BSP cap (max # of pool tokens)      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructRights(bool[])\":{\"notice\":\"create a struct from an array (or return defaults)\"},\"convertRights(RightsManager.Rights)\":{\"notice\":\"Convert rights struct to an array (e.g., for events, GUI)\"},\"hasPermission(RightsManager.Rights,RightsManager.Permissions)\":{\"notice\":\"Externally check permissions using the Enum\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/RightsManager.sol\":\"RightsManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Desyn Labs\\n * @title Manage Configurable Rights for the smart pool\\n *                         by default, it is off on initialization and can only be turned on\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n *      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\\n */\\nlibrary RightsManager {\\n    // Type declarations\\n\\n    enum Permissions {\\n        WHITELIST_LPS,\\n        TOKEN_WHITELISTS\\n    }\\n\\n    struct Rights {\\n        bool canWhitelistLPs;\\n        bool canTokenWhiteLists;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_TOKEN_WHITELISTS = false;\\n\\n    // bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_FLOOR = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */\\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length < 3) {\\n            return\\n                Rights(\\n                    DEFAULT_CAN_WHITELIST_LPS,\\n                    DEFAULT_CAN_TOKEN_WHITELISTS\\n                );\\n        } else {\\n            // return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n            return Rights(a[0], a[1]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](2);\\n\\n        result[0] = rights.canWhitelistLPs;\\n        result[1] = rights.canTokenWhiteLists;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        } else if (Permissions.TOKEN_WHITELISTS == permission) {\\n            return self.canTokenWhiteLists;\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x5c30ae1570f67d7657fdaec878a3c53cc7145833c9a6570a384f16f71610c784\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6103f3610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80634583544a14610066578063710a51c21461008f578063c08473fc146100af578063dccf54e7146100cf578063fe7f62d1146100cf575b600080fd5b610079610074366004610317565b6100d7565b6040516100869190610397565b60405180910390f35b6100a261009d3660046102fc565b610127565b6040516100869190610351565b6100c26100bd366004610266565b6101a7565b60405161008691906103a2565b610079610233565b60008160018111156100e557fe5b6100fd576100f660208401846102d5565b9050610121565b81600181111561010957fe5b60011415610121576100f660408401602085016102d5565b92915050565b60408051600280825260608083018452928392919060208301908036833701905050905061015860208401846102d5565b8160008151811061016557fe5b91151560209283029190910182015261018490604085019085016102d5565b8160018151811061019157fe5b9115156020928302919091019091015292915050565b6101af610238565b60038210156101d257506040805180820190915260008082526020820152610121565b6040518060400160405280848460008181106101ea57fe5b90506020020160208101906101ff91906102d5565b151581526020018484600181811061021357fe5b905060200201602081019061022891906102d5565b151590529050610121565b600081565b604080518082019091526000808252602082015290565b600060408284031215610260578081fd5b50919050565b60008060208385031215610278578182fd5b823567ffffffffffffffff8082111561028f578384fd5b818501915085601f8301126102a2578384fd5b8135818111156102b0578485fd5b86602080830285010111156102c3578485fd5b60209290920196919550909350505050565b6000602082840312156102e6578081fd5b813580151581146102f5578182fd5b9392505050565b60006040828403121561030d578081fd5b6102f5838361024f565b60008060608385031215610329578182fd5b610333848461024f565b9150604083013560028110610346578182fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561038b57835115158352928401929184019160010161036d565b50909695505050505050565b901515815260200190565b8151151581526020918201511515918101919091526040019056fea26469706673582212204e019fa0370c7cb23b2f2a2b5c5248fc914be0848061220d69e2d913fba907ba64736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80634583544a14610066578063710a51c21461008f578063c08473fc146100af578063dccf54e7146100cf578063fe7f62d1146100cf575b600080fd5b610079610074366004610317565b6100d7565b6040516100869190610397565b60405180910390f35b6100a261009d3660046102fc565b610127565b6040516100869190610351565b6100c26100bd366004610266565b6101a7565b60405161008691906103a2565b610079610233565b60008160018111156100e557fe5b6100fd576100f660208401846102d5565b9050610121565b81600181111561010957fe5b60011415610121576100f660408401602085016102d5565b92915050565b60408051600280825260608083018452928392919060208301908036833701905050905061015860208401846102d5565b8160008151811061016557fe5b91151560209283029190910182015261018490604085019085016102d5565b8160018151811061019157fe5b9115156020928302919091019091015292915050565b6101af610238565b60038210156101d257506040805180820190915260008082526020820152610121565b6040518060400160405280848460008181106101ea57fe5b90506020020160208101906101ff91906102d5565b151581526020018484600181811061021357fe5b905060200201602081019061022891906102d5565b151590529050610121565b600081565b604080518082019091526000808252602082015290565b600060408284031215610260578081fd5b50919050565b60008060208385031215610278578182fd5b823567ffffffffffffffff8082111561028f578384fd5b818501915085601f8301126102a2578384fd5b8135818111156102b0578485fd5b86602080830285010111156102c3578485fd5b60209290920196919550909350505050565b6000602082840312156102e6578081fd5b813580151581146102f5578182fd5b9392505050565b60006040828403121561030d578081fd5b6102f5838361024f565b60008060608385031215610329578182fd5b610333848461024f565b9150604083013560028110610346578182fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561038b57835115158352928401929184019160010161036d565b50909695505050505050565b901515815260200190565b8151151581526020918201511515918101919091526040019056fea26469706673582212204e019fa0370c7cb23b2f2a2b5c5248fc914be0848061220d69e2d913fba907ba64736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "constructRights(bool[])": {
        "details": "If you pass an empty array, it will construct it using the defaults",
        "params": {
          "a": "- array input"
        },
        "returns": {
          "_0": "Rights struct"
        }
      },
      "convertRights(RightsManager.Rights)": {
        "details": "avoids multiple calls to hasPermission",
        "params": {
          "rights": "- the rights struct to convert"
        },
        "returns": {
          "_0": "boolean array containing the rights settings"
        }
      },
      "hasPermission(RightsManager.Rights,RightsManager.Permissions)": {
        "params": {
          "permission": "- The permission to check",
          "self": "- Rights struct containing the permissions"
        },
        "returns": {
          "_0": "Boolean true if it has the permission"
        }
      }
    },
    "title": "Manage Configurable Rights for the smart pool                         by default, it is off on initialization and can only be turned on      canWhitelistLPs - can limit liquidity providers to a given set of addresses      canChangeCap - can change the BSP cap (max # of pool tokens)      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructRights(bool[])": {
        "notice": "create a struct from an array (or return defaults)"
      },
      "convertRights(RightsManager.Rights)": {
        "notice": "Convert rights struct to an array (e.g., for events, GUI)"
      },
      "hasPermission(RightsManager.Rights,RightsManager.Permissions)": {
        "notice": "Externally check permissions using the Enum"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}